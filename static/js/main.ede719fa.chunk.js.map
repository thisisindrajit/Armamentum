{"version":3,"sources":["logo.png","Body/Notes/Notes.js","Body/Quote/Quote.js","Body/Welcome/Welcome.js","Layout.js","serviceWorker.js","index.js"],"names":["module","exports","Notes","inputHandler","e","index","secindex","newNotes","state","notes","target","value","setState","createHandler","data","title","newnotetitle","body","newnotebody","fetch","method","headers","JSON","stringify","then","res","json","isLoading","showcreatenewnotebox","openbox","createnoteinputHandler","name","updateHandler","id","newbody","alert","deleteHandler","autosize","document","querySelectorAll","onClick","this","className","onChange","placeholder","rows","map","note","key","defaultValue","Component","Quote","props","quote","author","response","content","PureComponent","Welcome","hour","Date","getHours","Layout","tick","time","toLocaleTimeString","setInterval","src","logo","alt","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ede719fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0d338a54.png\";","import React, { Component } from \"react\";\r\nimport \"./notes.css\";\r\nimport autosize from \"autosize\";\r\n\r\nexport default class Notes extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      notes: [],\r\n      isLoading: true,\r\n      newnotetitle:\"\", \r\n      newnotebody:\"\",\r\n      showcreatenewnotebox: false\r\n    };\r\n  }\r\n\r\n  //https://armamentum.herokuapp.com/notes is the link for the hosted nodejs server\r\n\r\n  componentDidMount() {\r\n    //autosize(this.notebody);\r\n\r\n    fetch(\"https://armamentum.herokuapp.com/notes\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        //console.log(res);\r\n        this.setState({ notes: res, isLoading: false });\r\n      });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    autosize(document.querySelectorAll(\".note-title\"));\r\n    autosize(document.querySelectorAll(\".note-textarea\"));\r\n  }\r\n\r\n  inputHandler = (e, index, secindex) => {\r\n    const newNotes = [...this.state.notes];\r\n    newNotes[index][secindex] = e.target.value;\r\n    this.setState({ notes: newNotes });\r\n  };\r\n\r\n  createHandler = () => {\r\n\r\n    const data = {\r\n      title: this.state.newnotetitle,\r\n      body: this.state.newnotebody\r\n    }\r\n\r\n\r\n    fetch(\"https://armamentum.herokuapp.com/notes/postnote\", {\r\n      method: \"POST\",\r\n      headers:{'Content-type': 'application/json'},\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => {\r\n\r\n        fetch(\"https://armamentum.herokuapp.com/notes\")\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            this.setState({ notes: res, isLoading: false, newnotetitle:\"\", newnotebody:\"\",showcreatenewnotebox: false });\r\n          });\r\n      });\r\n  }\r\n\r\n  openbox = () => {\r\n    this.setState({showcreatenewnotebox: !this.state.showcreatenewnotebox});\r\n  }\r\n\r\n  createnoteinputHandler = (e) => {\r\n    this.setState({[e.target.name]: e.target.value})\r\n  }\r\n\r\n  updateHandler = (id, index) => {\r\n\r\n    const newbody = {\r\n        title: this.state.notes[index][1],\r\n        body: this.state.notes[index][0]\r\n    }\r\n\r\n    fetch(\"https://armamentum.herokuapp.com/notes/updatenote/\" + id, {\r\n      method: \"PUT\",\r\n      headers:{'Content-type': 'application/json'},\r\n      body: JSON.stringify(newbody),\r\n    })\r\n      .then(() => {\r\n        //console.log(res);\r\n        alert(\"Updated note!\");\r\n      });\r\n  };\r\n\r\n  deleteHandler = (id) => {\r\n\r\n    fetch(\"https://armamentum.herokuapp.com/notes/deletenote/\" + id, {\r\n        method: \"DELETE\"\r\n    })\r\n    .then(() => {\r\n\r\n      fetch(\"https://armamentum.herokuapp.com/notes\")\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            this.setState({ notes: res, isLoading: false, showcreatenewnotebox: false });\r\n          });\r\n\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"notes\">\r\n        <div id=\"create-new-note\" onClick={() => this.openbox()}>Create a new note</div> \r\n        {this.state.showcreatenewnotebox && \r\n        <div id=\"create-new-note-box\">\r\n          <textarea\r\n                    className=\"note-title\"\r\n                    name={\"newnotetitle\"}\r\n                    onChange={(e) => this.createnoteinputHandler(e)}\r\n                    placeholder={\"Note title\"}\r\n                    value={this.state.newnotetitle}\r\n                    rows={1}\r\n          ></textarea>\r\n          <div className=\"note-body\">\r\n          <textarea\r\n                    className=\"note-textarea\"\r\n                    name={\"newnotebody\"}\r\n                    onChange={(e) => this.createnoteinputHandler(e)}\r\n                    placeholder={\"Note body\"}\r\n                    value={this.state.newnotebody}\r\n                    rows={1}\r\n          ></textarea>\r\n          </div>\r\n          <div className=\"buttons\">\r\n          <div id=\"create-note-button\" onClick={() => this.createHandler()}>Create</div>\r\n          </div>\r\n        </div>\r\n        }\r\n        {this.state.isLoading === true\r\n          ? <div id=\"loading\">Loading notes...</div>\r\n          : \r\n          this.state.notes.map((note, index) => {\r\n              return (\r\n                <div className=\"note\" key={note[2][\"@ref\"].id}>\r\n                  <textarea\r\n                    className=\"note-title\"\r\n                    name={\"title\"}\r\n                    onChange={(e) => this.inputHandler(e, index, 1)}\r\n                    defaultValue={note[1]}\r\n                    rows={1}\r\n                  ></textarea>\r\n                  <div className=\"note-body\">\r\n                    <textarea\r\n                      className=\"note-textarea\"\r\n                      name={\"body\"}\r\n                      onChange={(e) => this.inputHandler(e, index, 0)}\r\n                      defaultValue={note[0]}\r\n                      rows={1}\r\n                    ></textarea>\r\n                  </div>\r\n                  <div className=\"buttons\">\r\n                  <div className=\"delete-button\" onClick={() => this.deleteHandler(note[2][\"@ref\"].id)}>Delete</div>\r\n                  <div\r\n                    className=\"save-button\"\r\n                    onClick={() =>\r\n                      this.updateHandler(note[2][\"@ref\"].id, index)\r\n                    }\r\n                  >\r\n                    Save\r\n                  </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport './quotes.css';\r\n\r\nexport default class Quote extends PureComponent\r\n{\r\n    constructor(props)\r\n    {\r\n    super(props);\r\n    this.state={\r\n        quote:\"\",\r\n        author:\"\"\r\n    };\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://api.quotable.io/random')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState({quote:data.content, author:data.author})\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n    return(\r\n        <div id=\"quote\"> \r\n                <span id=\"content\">{this.state.quote}</span>\r\n                {this.state.quote !== \"\" && <div id=\"line\"></div>}\r\n                <span id=\"author\">{this.state.author}</span>\r\n        </div>\r\n    );\r\n    }\r\n}","import React,{PureComponent} from 'react';\r\nimport './welcome.css';\r\nimport Notes from '../Notes/Notes';\r\nimport Quote from '../Quote/Quote';\r\n\r\nexport default class Welcome extends PureComponent\r\n{\r\n    render() {\r\n\r\n    var hour = new Date().getHours();\r\n\r\n    return(\r\n        <div id=\"content\">\r\n        <div id=\"welcome\">\r\n            {hour < 12 ? \"Good Morning\" : hour < 16 ? \"Good Afternoon\" : hour < 20 ? \"Good Evening\" : \"Good Night\"} Indrajit!\r\n        </div>\r\n\r\n        <Quote />\r\n\r\n        <div id=\"widget-grid\">\r\n            <Notes />\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}","import React from \"react\";\nimport \"./layout.css\";\n// import TOPOLOGY from \"vanta/dist/vanta.topology.min\";\nimport Welcome from \"./Body/Welcome/Welcome\";\nimport logo from \"./logo.png\";\n\n//Have uninstalled Vanta package since it took a lot of processing to render the background, making the website slow\nclass Layout extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      time: \"\",\n    };\n    //this.vantaRef = React.createRef();\n  }\n\n  tick = () => {\n    this.setState({ time: new Date().toLocaleTimeString() });\n  };\n\n  componentDidMount() {\n    // this.vantaEffect = TOPOLOGY({\n    //   el: this.vantaRef.current,\n    //   mouseControls: true,\n    //   touchControls: true,\n    //   gyroControls: false,\n    //   minHeight: 200.0,\n    //   minWidth: 200.0,\n    //   scale: 1.0,\n    //   scaleMobile: 1.0,\n    //   color: 0xffc0,\n    //   backgroundColor: 0x0,\n    // });\n\n    this.tick();\n  }\n\n  componentDidUpdate() {\n    setInterval(this.tick, 1000);\n  }\n\n  // componentWillUnmount() {\n  //   if (this.vantaEffect) this.vantaEffect.destroy();\n  // }\n\n  render() {\n    return (\n      <div id=\"bg\">\n        {/* logo and title */}\n        <div id=\"titleandlogo\">\n          <img src={logo} alt=\"logo\" id=\"logo\"></img>\n          <span id=\"title\">ARMAMENTUM</span>\n          <div id=\"time\">\n            <h2>{this.state.time}</h2>\n          </div>\n        </div>\n\n        {/*body*/}\n        <Welcome />\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Layout from './Layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}